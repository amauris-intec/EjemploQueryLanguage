//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\ama\source\repos\EjemploQueryLanguage\query.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class queryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LLAVE1=1, LLAVE2=2, LT=3, GT=4, AND=5, IGUAL=6, COR1=7, COR2=8, PAR1=9, 
		PAR2=10, COMILLAS=11, COMA=12, PUNTO=13, NUM=14, TEXTO=15, ID=16, WS=17;
	public const int
		RULE_query = 0, RULE_join = 1, RULE_condicion = 2, RULE_criterio = 3, 
		RULE_tabla = 4, RULE_seleccion = 5;
	public static readonly string[] ruleNames = {
		"query", "join", "condicion", "criterio", "tabla", "seleccion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'<'", "'>'", "'&'", "'='", "'['", "']'", "'('", "')'", 
		"'\"'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LLAVE1", "LLAVE2", "LT", "GT", "AND", "IGUAL", "COR1", "COR2", 
		"PAR1", "PAR2", "COMILLAS", "COMA", "PUNTO", "NUM", "TEXTO", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static queryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public queryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public queryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
	 
		public QueryContext() { }
		public virtual void CopyFrom(QueryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QueryConJoinContext : QueryContext {
		[System.Diagnostics.DebuggerNonUserCode] public JoinContext join() {
			return GetRuleContext<JoinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COR1() { return GetToken(queryParser.COR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondicionContext condicion() {
			return GetRuleContext<CondicionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COR2() { return GetToken(queryParser.COR2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(queryParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeleccionContext seleccion() {
			return GetRuleContext<SeleccionContext>(0);
		}
		public QueryConJoinContext(QueryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryConJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuerySinJoinContext : QueryContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablaContext tabla() {
			return GetRuleContext<TablaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COR1() { return GetToken(queryParser.COR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondicionContext condicion() {
			return GetRuleContext<CondicionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COR2() { return GetToken(queryParser.COR2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(queryParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeleccionContext seleccion() {
			return GetRuleContext<SeleccionContext>(0);
		}
		public QuerySinJoinContext(QueryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySinJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new QueryConJoinContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 12;
				join();
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COR1) {
					{
					State = 13;
					Match(COR1);
					State = 14;
					condicion();
					State = 15;
					Match(COR2);
					}
				}

				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUNTO) {
					{
					State = 19;
					Match(PUNTO);
					State = 20;
					seleccion();
					}
				}

				}
				break;
			case 2:
				_localctx = new QuerySinJoinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 23;
				tabla();
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COR1) {
					{
					State = 24;
					Match(COR1);
					State = 25;
					condicion();
					State = 26;
					Match(COR2);
					}
				}

				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUNTO) {
					{
					State = 30;
					Match(PUNTO);
					State = 31;
					seleccion();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinContext : ParserRuleContext {
		public TablaContext tabla1;
		public IToken tipo;
		public TablaContext tabla2;
		[System.Diagnostics.DebuggerNonUserCode] public TablaContext[] tabla() {
			return GetRuleContexts<TablaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablaContext tabla(int i) {
			return GetRuleContext<TablaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(queryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(queryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(queryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE1() { return GetToken(queryParser.LLAVE1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondicionContext condicion() {
			return GetRuleContext<CondicionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE2() { return GetToken(queryParser.LLAVE2, 0); }
		public JoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinContext join() {
		JoinContext _localctx = new JoinContext(Context, State);
		EnterRule(_localctx, 2, RULE_join);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			_localctx.tabla1 = tabla();
			State = 37;
			_localctx.tipo = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << AND))) != 0)) ) {
				_localctx.tipo = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 38;
			_localctx.tabla2 = tabla();
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LLAVE1) {
				{
				State = 39;
				Match(LLAVE1);
				State = 40;
				condicion();
				State = 41;
				Match(LLAVE2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondicionContext : ParserRuleContext {
		public CondicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicion; } }
	 
		public CondicionContext() { }
		public virtual void CopyFrom(CondicionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondicionMultipleContext : CondicionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CriterioContext[] criterio() {
			return GetRuleContexts<CriterioContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CriterioContext criterio(int i) {
			return GetRuleContext<CriterioContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(queryParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(queryParser.COMA, i);
		}
		public CondicionMultipleContext(CondicionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondicionMultiple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondicionUnicaContext : CondicionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CriterioContext criterio() {
			return GetRuleContext<CriterioContext>(0);
		}
		public CondicionUnicaContext(CondicionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondicionUnica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondicionContext condicion() {
		CondicionContext _localctx = new CondicionContext(Context, State);
		EnterRule(_localctx, 4, RULE_condicion);
		int _la;
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new CondicionUnicaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				criterio();
				}
				break;
			case 2:
				_localctx = new CondicionMultipleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				criterio();
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 47;
					Match(COMA);
					State = 48;
					criterio();
					}
					}
					State = 51;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMA );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriterioContext : ParserRuleContext {
		public CriterioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criterio; } }
	 
		public CriterioContext() { }
		public virtual void CopyFrom(CriterioContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CriterioJoinContext : CriterioContext {
		public IToken alias1;
		public IToken campo1;
		public IToken alias2;
		public IToken campo2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO() { return GetTokens(queryParser.PUNTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO(int i) {
			return GetToken(queryParser.PUNTO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(queryParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(queryParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(queryParser.ID, i);
		}
		public CriterioJoinContext(CriterioContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterioJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CriterioNumericoContext : CriterioContext {
		public IToken alias;
		public IToken campo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(queryParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(queryParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(queryParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(queryParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(queryParser.PUNTO, 0); }
		public CriterioNumericoContext(CriterioContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterioNumerico(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CriterioAlphanumericoContext : CriterioContext {
		public IToken alias;
		public IToken campo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(queryParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO() { return GetToken(queryParser.TEXTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(queryParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(queryParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(queryParser.PUNTO, 0); }
		public CriterioAlphanumericoContext(CriterioContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterioAlphanumerico(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriterioContext criterio() {
		CriterioContext _localctx = new CriterioContext(Context, State);
		EnterRule(_localctx, 6, RULE_criterio);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new CriterioNumericoContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 55;
					((CriterioNumericoContext)_localctx).alias = Match(ID);
					State = 56;
					Match(PUNTO);
					}
					break;
				}
				State = 59;
				((CriterioNumericoContext)_localctx).campo = Match(ID);
				State = 60;
				Match(IGUAL);
				State = 61;
				Match(NUM);
				}
				break;
			case 2:
				_localctx = new CriterioAlphanumericoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 62;
					((CriterioAlphanumericoContext)_localctx).alias = Match(ID);
					State = 63;
					Match(PUNTO);
					}
					break;
				}
				State = 66;
				((CriterioAlphanumericoContext)_localctx).campo = Match(ID);
				State = 67;
				Match(IGUAL);
				State = 68;
				Match(TEXTO);
				}
				break;
			case 3:
				_localctx = new CriterioJoinContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				((CriterioJoinContext)_localctx).alias1 = Match(ID);
				State = 70;
				Match(PUNTO);
				State = 71;
				((CriterioJoinContext)_localctx).campo1 = Match(ID);
				State = 72;
				Match(IGUAL);
				State = 73;
				((CriterioJoinContext)_localctx).alias2 = Match(ID);
				State = 74;
				Match(PUNTO);
				State = 75;
				((CriterioJoinContext)_localctx).campo2 = Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablaContext : ParserRuleContext {
		public TablaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabla; } }
	 
		public TablaContext() { }
		public virtual void CopyFrom(TablaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TablaSinAliasContext : TablaContext {
		public IToken nombre;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(queryParser.ID, 0); }
		public TablaSinAliasContext(TablaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablaSinAlias(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TablaConAliasContext : TablaContext {
		public IToken nombre;
		public IToken alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR1() { return GetToken(queryParser.PAR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR2() { return GetToken(queryParser.PAR2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(queryParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(queryParser.ID, i);
		}
		public TablaConAliasContext(TablaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablaConAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablaContext tabla() {
		TablaContext _localctx = new TablaContext(Context, State);
		EnterRule(_localctx, 8, RULE_tabla);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new TablaSinAliasContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				((TablaSinAliasContext)_localctx).nombre = Match(ID);
				}
				break;
			case 2:
				_localctx = new TablaConAliasContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				((TablaConAliasContext)_localctx).nombre = Match(ID);
				State = 80;
				Match(PAR1);
				State = 81;
				((TablaConAliasContext)_localctx).alias = Match(ID);
				State = 82;
				Match(PAR2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeleccionContext : ParserRuleContext {
		public SeleccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seleccion; } }
	 
		public SeleccionContext() { }
		public virtual void CopyFrom(SeleccionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SeleccionUnicaContext : SeleccionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(queryParser.ID, 0); }
		public SeleccionUnicaContext(SeleccionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeleccionUnica(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SeleccionMultipleContext : SeleccionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(queryParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(queryParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(queryParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(queryParser.COMA, i);
		}
		public SeleccionMultipleContext(SeleccionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqueryVisitor<TResult> typedVisitor = visitor as IqueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeleccionMultiple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeleccionContext seleccion() {
		SeleccionContext _localctx = new SeleccionContext(Context, State);
		EnterRule(_localctx, 10, RULE_seleccion);
		int _la;
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new SeleccionUnicaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				Match(ID);
				}
				break;
			case 2:
				_localctx = new SeleccionMultipleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(ID);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 87;
					Match(COMA);
					State = 88;
					Match(ID);
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMA );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\x62', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x14', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x18', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x1F', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '#', '\n', '\x2', '\x5', '\x2', '%', '\n', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '\x34', '\n', '\x4', '\r', '\x4', 
		'\xE', '\x4', '\x35', '\x5', '\x4', '\x38', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '<', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x43', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'O', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'V', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', '\\', '\n', 
		'\a', '\r', '\a', '\xE', '\a', ']', '\x5', '\a', '`', '\n', '\a', '\x3', 
		'\a', '\x2', '\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', 
		'\x3', '\x3', '\x2', '\x5', '\a', '\x2', 'j', '\x2', '$', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '&', '\x3', '\x2', '\x2', '\x2', '\x6', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'N', '\x3', '\x2', '\x2', '\x2', '\n', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\f', '_', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x13', '\x5', '\x4', '\x3', '\x2', '\xF', '\x10', '\a', '\t', '\x2', 
		'\x2', '\x10', '\x11', '\x5', '\x6', '\x4', '\x2', '\x11', '\x12', '\a', 
		'\n', '\x2', '\x2', '\x12', '\x14', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x17', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\a', 
		'\xF', '\x2', '\x2', '\x16', '\x18', '\x5', '\f', '\a', '\x2', '\x17', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '%', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1E', '\x5', 
		'\n', '\x6', '\x2', '\x1A', '\x1B', '\a', '\t', '\x2', '\x2', '\x1B', 
		'\x1C', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x1D', '\a', '\n', '\x2', 
		'\x2', '\x1D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\"', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', '\xF', '\x2', '\x2', 
		'!', '#', '\x5', '\f', '\a', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '%', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xE', '\x3', '\x2', '\x2', '\x2', '$', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '%', '\x3', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x5', 
		'\n', '\x6', '\x2', '\'', '(', '\t', '\x2', '\x2', '\x2', '(', '-', '\x5', 
		'\n', '\x6', '\x2', ')', '*', '\a', '\x3', '\x2', '\x2', '*', '+', '\x5', 
		'\x6', '\x4', '\x2', '+', ',', '\a', '\x4', '\x2', '\x2', ',', '.', '\x3', 
		'\x2', '\x2', '\x2', '-', ')', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x5', '\x3', '\x2', '\x2', '\x2', '/', '\x38', 
		'\x5', '\b', '\x5', '\x2', '\x30', '\x33', '\x5', '\b', '\x5', '\x2', 
		'\x31', '\x32', '\a', '\xE', '\x2', '\x2', '\x32', '\x34', '\x5', '\b', 
		'\x5', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '/', '\x3', '\x2', '\x2', '\x2', '\x37', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\a', '\x12', '\x2', '\x2', ':', '<', '\a', '\xF', '\x2', 
		'\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x12', 
		'\x2', '\x2', '>', '?', '\a', '\b', '\x2', '\x2', '?', 'O', '\a', '\x10', 
		'\x2', '\x2', '@', '\x41', '\a', '\x12', '\x2', '\x2', '\x41', '\x43', 
		'\a', '\xF', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\x12', '\x2', '\x2', '\x45', '\x46', '\a', 
		'\b', '\x2', '\x2', '\x46', 'O', '\a', '\x11', '\x2', '\x2', 'G', 'H', 
		'\a', '\x12', '\x2', '\x2', 'H', 'I', '\a', '\xF', '\x2', '\x2', 'I', 
		'J', '\a', '\x12', '\x2', '\x2', 'J', 'K', '\a', '\b', '\x2', '\x2', 'K', 
		'L', '\a', '\x12', '\x2', '\x2', 'L', 'M', '\a', '\xF', '\x2', '\x2', 
		'M', 'O', '\a', '\x12', '\x2', '\x2', 'N', ';', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x42', '\x3', '\x2', '\x2', '\x2', 'N', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'O', '\t', '\x3', '\x2', '\x2', '\x2', 'P', 'V', '\a', '\x12', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x12', '\x2', '\x2', 'R', 'S', '\a', '\v', 
		'\x2', '\x2', 'S', 'T', '\a', '\x12', '\x2', '\x2', 'T', 'V', '\a', '\f', 
		'\x2', '\x2', 'U', 'P', '\x3', '\x2', '\x2', '\x2', 'U', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\v', '\x3', '\x2', '\x2', '\x2', 'W', '`', '\a', '\x12', 
		'\x2', '\x2', 'X', '[', '\a', '\x12', '\x2', '\x2', 'Y', 'Z', '\a', '\xE', 
		'\x2', '\x2', 'Z', '\\', '\a', '\x12', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', 
		'`', '\x3', '\x2', '\x2', '\x2', '_', 'W', '\x3', '\x2', '\x2', '\x2', 
		'_', 'X', '\x3', '\x2', '\x2', '\x2', '`', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x13', '\x17', '\x1E', '\"', '$', '-', '\x35', '\x37', 
		';', '\x42', 'N', 'U', ']', '_',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
